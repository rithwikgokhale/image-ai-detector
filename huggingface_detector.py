#!/usr/bin/env python3
"""
Hugging Face AI Detection Model
Uses pre-trained models for AI image detection
"""

import requests
import json
from flask import Flask, request, jsonify
import os
from PIL import Image
import io
import base64
import re

app = Flask(__name__)

# Hugging Face API endpoint for AI detection models
HF_API_URL = "https://api-inference.huggingface.co/models/"

def detect_ai_with_huggingface(image_url, api_key):
    """
    Use Hugging Face's API to classify images
    We'll use a vision-language model and prompt it for AI detection
    """
    try:
        # Download image
        response = requests.get(image_url, timeout=10)
        response.raise_for_status()
        
        # Convert to base64 for API
        image_data = base64.b64encode(response.content).decode('utf-8')
        
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        # Use a simpler approach with a basic vision model
        model_name = "google/vit-base-patch16-224"
        
        # Create a prompt for AI detection
        prompt = "Analyze this image and determine if it was generated by AI or is a real photograph. Look for signs like: 1) Unrealistic details or artifacts 2) Perfect symmetry or patterns 3) Inconsistent lighting or shadows 4) Unusual textures or surfaces. Respond with only 'AI' or 'REAL' followed by a confidence percentage (0-100)."
        
        payload = {
            "inputs": {
                "image": f"data:image/jpeg;base64,{image_data}",
                "text": prompt
            }
        }
        
        api_response = requests.post(
            f"{HF_API_URL}{model_name}",
            json=payload,
            headers=headers
        )
        
        if api_response.status_code == 200:
            result = api_response.json()
            
            # Parse the response to extract AI/REAL and confidence
            response_text = result.get('generated_text', '')
            
            # Extract AI/REAL label
            ai_match = re.search(r'\bAI\b', response_text, re.IGNORECASE)
            real_match = re.search(r'\bREAL\b', response_text, re.IGNORECASE)
            
            if ai_match:
                label = "ai"
            elif real_match:
                label = "real"
            else:
                # Default to real if unclear
                label = "real"
            
            # Extract confidence (look for percentage)
            confidence_match = re.search(r'(\d+)%', response_text)
            if confidence_match:
                confidence = int(confidence_match.group(1)) / 100.0
            else:
                # Default confidence based on response clarity
                confidence = 0.7 if label == "ai" else 0.6
            
            return {
                "label": label,
                "confidence": confidence,
                "source": "huggingface",
                "raw_response": response_text
            }
        else:
            return {"error": f"API error: {api_response.status_code}", "details": api_response.text}
            
    except Exception as e:
        return {"error": str(e)}

@app.route('/classify', methods=['POST'])
def classify_image():
    """Flask endpoint for image classification"""
    try:
        data = request.get_json()
        image_url = data.get('imageUrl')
        api_key = os.getenv('HF_API_KEY')
        
        if not image_url:
            return jsonify({"error": "imageUrl required"}), 400
            
        if not api_key:
            return jsonify({"error": "HF_API_KEY environment variable required"}), 500
            
        result = detect_ai_with_huggingface(image_url, api_key)
        return jsonify(result)
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    api_key = os.getenv('HF_API_KEY')
    return jsonify({
        "status": "healthy", 
        "api_key_configured": bool(api_key),
        "api_key_length": len(api_key) if api_key else 0
    })

if __name__ == '__main__':
    print("Starting Hugging Face AI Detection API...")
    print("Make sure to set HF_API_KEY environment variable")
    print("API will be available at http://localhost:5001/classify")
    app.run(debug=True, port=5001, host='0.0.0.0')
